//
//  main.c
//  alg_practice
//
//  Created by RUAN on 2021/06/07.
//

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define M 13

typedef struct{
    int key;
    int probeCount;
} Bucket;

typedef struct{
    Bucket a[M];
} HashType;

void init(HashType* HT){
    for(int i=0; i<M; i++){
        HT->a[i].key = 0;
        HT->a[i].probeCount = 0;
    }
}

int h(int key){
    return key % M;
}

int h2(int key){
    return 11-(key%11);
}

int getNextBucketLinear(int v, int i){ //선형조사법
    return (v+i) % M;
}

int getNextBucketQuadratic(int v, int i){ //이차조사법
    return (v+i*i) % M;
}

int getNextBucketDouble(int v, int i, int key){ //이중해싱법
    return (v+i*h2(key)) % M;
}

int isEmpty(HashType* HT, int b){
    return HT->a[b].key == 0;
}

void insertItem(HashType* HT, int key){
    int v = h(key);
    int i = 0;
    int count = 0;
    while(i<M){
        count++;
        int b = getNextBucketLinear(v, i); //선형조사법
        //int b = getNextBucketQuadratic(v, i); //2차 조사법
        //int b = getNextBucketDouble(v, i, key); //이중해싱법

        if(isEmpty(HT, b)){
            HT->a[b].key = key;
            HT->a[b].probeCount = count;
            return;
        }
        else
            i++;
    }
}

int findElem(HashType* HT, int key){
    int v = h(key);
    int i = 0;
    while(i<M){
        int b = getNextBucketLinear(v, i); //선형조사법

        if(isEmpty(HT, b)){
            return 0;
        }
        else if(HT->a[b].key == key)
            return key;
        else
            i++;
    }
    return 0;
}

int removeElem(HashType* HT, int key){
    int v = h(key);
    int i = 0;
    while(i<M){
        int b = getNextBucketLinear(v, i); //선형조사법
        if(isEmpty(HT, b)){
            return 0;
        }
        else if(HT->a[b].key == key){
            HT->a[b].key = 0;
            HT->a[b].probeCount = 0;
            return key;
        }
        else
            i++;
    }
    return 0;
}

void printHash(HashType* HT){
    printf("\nbucket   key  probe\n");
    for(int i=0; i<M; i++){
        printf("HT[%02d] :  %2d    %d\n", i, HT->a[i].key, HT->a[i].probeCount);
    }
    printf("\n");
}


int main(){
    
    HashType HT;
    init(&HT);
    
    insertItem(&HT, 25);
    insertItem(&HT, 13);
    insertItem(&HT, 16);
    insertItem(&HT, 15);
    insertItem(&HT, 7);
    insertItem(&HT, 28);
    insertItem(&HT, 31);
    insertItem(&HT, 20);
    insertItem(&HT, 1);
    insertItem(&HT, 38);
    printHash(&HT);
    
    int find;
    printf("find : ");
    scanf("%d", &find);
    
    if(findElem(&HT, find))
        printf("found %d!\n", find);
    else
        printf("not found\n");
    
    int dele;
    printf("delete : ");
    scanf("%d", &dele);
    
    if(removeElem(&HT, dele)){
        printf("deleted %d!\n", dele);
        printHash(&HT);
    }
    else
        printf("not found\n");
    
    return 0;
}
