//
//  main.c
//  alg_practice
//
//  Created by RUAN on 2021/06/07.
//

#include <stdio.h>
#include <stdlib.h>

#define SIZE 6

typedef struct{
    int num;
    float s,e;
}Segment;

typedef struct{
    float coor;
    char code;
    int id;
}Event;

typedef struct{
    int id1, id2;
}interSegment;

void insertion_sort(Event ev[], int n){
    int i,j;
    Event item;
    for(i=1; i<n; i++){
        item = ev[i];
        for(j=i-1; j>=0&&ev[j].coor>item.coor; j--){
            ev[j+1] = ev[j];
        }
        ev[j+1] = item;
    }
}

void findIntersectingSegment(Event ev[]){
    int openSegment[SIZE];
    interSegment is[SIZE*2];
    int oCnt = 0;
    int iCnt = 0;
    
    for(int i=0; i<SIZE*2; i++){
        if(ev[i].code == 'S'){
            for(int j=0; j<oCnt; j++){
                if(openSegment[j] != 0){
                    is[iCnt].id1 = openSegment[j];
                    is[iCnt].id2 = ev[i].id;
                    iCnt++;
                }
            }
            openSegment[oCnt++] = ev[i].id; //oS[oCnt] = ev[i].id, and then oCnt++
        }
        else{
            for(int j=0; j<oCnt; j++){
                if(openSegment[j] == ev[i].id){
                    openSegment[j] = 0;
                }
            }
        }
    }
    
    for(int i=0; i<iCnt; i++){
        printf("(%d, %d)", is[i].id1, is[i].id2);
    }
    printf("\n");
    
}

int main(int argc, const char * argv[]) {
    
    Segment lines[] = {{1,1.0,3.2},{2,0.8,3.0},{3,0.6,2.8},{4,1.1,2.0},{5,5.4,7.0},{6,2.9,5.0}};
    Event ev[SIZE*2];
    for(int i=0; i<SIZE; i++){
        printf("%d.(%.1f~%.1f)\n",lines[i].num, lines[i].s, lines[i].e);
    }
    printf("\n");
    
    getchar();
    
    for(int i=0, j=0; i<SIZE*2; i++, j++){
        ev[i].coor = lines[j].s;
        ev[i].code = 'S';
        ev[i].id = lines[j].num;
        ev[i+1].coor = lines[j].e;
        ev[i+1].code = 'E';
        ev[++i].id = lines[j].num; //why (++i)?
    }
    
    for(int i=0; i<SIZE*2; i++){
        printf("((%.1f, %c), %d)\n", ev[i].coor, ev[i].code, ev[i].id);
    }
    printf("\n");
    getchar();
    
    
    insertion_sort(ev, SIZE*2); //정열
    for(int i=0; i<SIZE*2; i++){
        printf("((%.1f, %c),%d)\n", ev[i].coor, ev[i].code, ev[i].id);
    }
    printf("\n");
    getchar();
    
    
    findIntersectingSegment(ev); //교차하는 성분을 출력
    
    return 0;
}


-------------------------------


1.(1.0~3.2)
2.(0.8~3.0)
3.(0.6~2.8)
4.(1.1~2.0)
5.(5.4~7.0)
6.(2.9~5.0)


((1.0, S), 1)
((3.2, E), 1)
((0.8, S), 2)
((3.0, E), 2)
((0.6, S), 3)
((2.8, E), 3)
((1.1, S), 4)
((2.0, E), 4)
((5.4, S), 5)
((7.0, E), 5)
((2.9, S), 6)
((5.0, E), 6)


((0.6, S),3)
((0.8, S),2)
((1.0, S),1)
((1.1, S),4)
((2.0, E),4)
((2.8, E),3)
((2.9, S),6)
((3.0, E),2)
((3.2, E),1)
((5.0, E),6)
((5.4, S),5)
((7.0, E),5)


(3, 2)(3, 1)(2, 1)(3, 4)(2, 4)(1, 4)(2, 6)(1, 6)
Program ended with exit code: 0





