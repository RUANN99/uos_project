//
//  main.c
//  alg_practice
//
//  Created by RUAN on 2021/06/07.
//

#include <stdio.h>
#include <stdlib.h>

#define max(a,b) (((a)>(b))?(a):(b))

typedef struct{
    int key, height;
    struct TreeNode * parent, * left, * right;
} TreeNode;

typedef struct{
    TreeNode * root;
} TreeType;

void initTree(TreeType* T){
    T->root = (TreeNode*)malloc(sizeof(TreeNode));
    T->root->parent = T->root->left = T->root->right = NULL;
}

int isExternal(TreeNode* w){
    return(w->left == NULL && w->right == NULL);
}

TreeNode* treeSearch(TreeNode* w, int k){
    if(isExternal(w)){
        return w;
    }
    
    if(k == w->key){
        return w;
    }
    else if(k < w->key){
        return treeSearch(w->left, k);
    }
    else{
        return treeSearch(w->right, k);
    }
}

void expandExternal(TreeNode* w){
    TreeNode* l = (TreeNode*)malloc(sizeof(TreeNode));
    TreeNode* r = (TreeNode*)malloc(sizeof(TreeNode));
    l->left = l->right = r->left = r->right = NULL;
    l->parent = w;
    r->parent = w;
    w->left = l;
    w->right = r;
}

int heightUpdateAndBalanceCheck(TreeNode* z){
    TreeNode* l, * r;
    int b;
    
    if(z == NULL)
        return 1;
    
    l = z->left;
    r = z->right;
    
    z->height = max(r->height, l->height) + 1;
    
    b = r->height - l->height;
    
    if(b*b < 2){
        return 1;
    }
    else{
        return 0;
    }
}

TreeNode* restructure(TreeType* T, TreeNode* x, TreeNode* y, TreeNode* z){
    TreeNode* a, * b, * c, * T0, * T1, * T2, * T3;
    
    //RR
    if(z->key < y->key && y->key < x->key){
        a = z;
        b = y;
        c = x;
        T0 = a->left;
        T1 = b->left;
        T2 = c->left;
        T3 = c->right;
    }
    
    //LL
    else if(z->key > y->key && y->key > x->key){
        a = x;
        b = y;
        c = z;
        T0 = a->left;
        T1 = a->right;
        T2 = b->right;
        T3 = c->right;
    }
    
    //RL
    else if(z->key < x->key && y->key > x->key){
        a = z;
        b = x;
        c = y;
        T0 = a->left;
        T1 = b->left;
        T2 = b->right;
        T3 = c->right;
    }
    
    //LR
    else{
        a = y;
        b = x;
        c = z;
        T0 = a->left;
        T1 = b->left;
        T2 = b->right;
        T3 = c->right;
    }
    
    //3
    TreeNode* zp = z->parent;
    
    if(z == T->root){
        T->root = b;
        b->parent = NULL;
    }
    else if(zp->left == z){
        zp->left = b;
        b->parent = z->parent;
    }
    else{
        zp->right = b;
        b->parent = z->parent;
    }
    
    //4
    a->left = T0;
    T0->parent = a;
    a->right = T1;
    T1->parent = a;
    a->height = max(T0->height, T1->height)+1;
    
    //5
    c->left = T2;
    T2->parent = c;
    c->right = T3;
    T3->parent = c;
    c->height = max(T2->height, T3->height)+1;
    
    //6
    b->left = a;
    a->parent = b;
    b->right = c;
    c->parent = b;
    b->height = max(a->height, c->height)+1;
    
    
    return b;
}

void searchAndFixInsertion(TreeType* T, TreeNode* w){
    TreeNode* z = w;
    TreeNode* y, * x;
    
    //1
    while(heightUpdateAndBalanceCheck(z)){
        if(z == NULL)
            return;
        z = z->parent;
    }
    
    //2
    TreeNode* zl = z->left;
    TreeNode* zr = z->right;
    if(zl->height > zr->height)
        y = z->left;
    else
        y = z->right;
    
    //3
    TreeNode* yl = y->left;
    TreeNode* yr = y->right;
    if(yl->height > yr->height)
        x = y->left;
    else
        x = y->right;
    
    //4
    restructure(T, x, y, z);
    
}

void insertItem(TreeType*T, int k){
    TreeNode* w = treeSearch(T->root, k);
    if(!isExternal(w)){
        return;
    }
    else{
        w->key = k;
        expandExternal(w);
        searchAndFixInsertion(T,w);
    }
}

void preOrder(TreeNode* root){
    if(isExternal(root)){
        return;
    }
    printf("[(%d.) %d]", root->height, root->key);
    preOrder(root->left);
    preOrder(root->right);
}


int main(int argc, const char * argv[]) {
    
    TreeType* T = (TreeType*)malloc(sizeof(TreeType));
    initTree(T);
    
    insertItem(T, 44);
    insertItem(T, 17);
    insertItem(T, 32);
    preOrder(T->root);
    printf("\n");
    insertItem(T, 78);
    insertItem(T, 50);
    insertItem(T, 88);
    preOrder(T->root);
    printf("\n");
    insertItem(T, 48);
    insertItem(T, 62);
    insertItem(T, 54);
    
    
    preOrder(T->root);
    printf("\n");
    
    printf("\n");
    return 0;
}

