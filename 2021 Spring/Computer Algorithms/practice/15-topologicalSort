//
//  main.c
//  alg_practice
//
//  Created by RUAN on 2021/06/07.
//

#include <stdio.h>
#include <stdlib.h>

typedef struct Edge{
    int vNum1, vNum2;
    int isTree;
    struct Edge* next;
}Edge;

typedef struct IncidentEdge{
    int adjVertex;
    Edge* e;
    struct IncidentEdge* next;
}IncidentEdge;

typedef struct Vertex{
    int num;
    int isFresh;
    struct Vertex* next;
    IncidentEdge* top;
}Vertex;

Vertex* vHead = NULL;
Edge* eHead = NULL;
int vCount, eCount;
int in[6];


#define N 10

typedef struct{
    int elem[N];
    int front, rear; //첫번째노드, 마지막노드
} Queue;

void initQueue(Queue* q){
    q->front = 0;
    q->rear = 0;
}

int isEmpty(Queue* q){ //circle queue
    return q->rear == q->front;
}

int isFull(Queue* q){
    return (q->rear+1)%N == q->front;
}

void enqueue(Queue* q, int ele){ //삽입
    if(isFull(q)){
        printf("FULL\n");
        return;
    }
    q->rear = (q->rear+1)%N;
    q->elem[q->rear] = ele;
}

int dequeue(Queue* q){ //삭제
    if(isEmpty(q)){
        printf("EMPTY\n");
        return -1;
    }
    q->front = (q->front+1)%N;
    return q->elem[q->front];
}


void makeVertices(){
    Vertex* p = (Vertex*)malloc(sizeof(Vertex));
    p->num = ++vCount;
    p->top = NULL;
    p->next = NULL;
    p->isFresh = 0;
    Vertex* q = vHead;
    if(q==NULL){
        vHead = p;
    }
    else{
        while(q->next != NULL){
            q = q->next;
        }
        q->next = p;
    }
}

Vertex* findVertex(int v){
    Vertex* p = vHead;
    while(p->num != v){
        p = p->next;
    }
    return p;
}

void insertIncidentEdge(Vertex* v, int av, Edge* e){
    IncidentEdge* p = (IncidentEdge*)malloc(sizeof(IncidentEdge));
    p->adjVertex = av;
    p->e = e;
    p->next = NULL;
    IncidentEdge* q = v->top;
    if(q == NULL){
        v->top = p;
    }
    else{
        while(q->next != NULL){
            q = q->next;
        }
        q->next = p;
    }
}

void insertEdge(int v1, int v2){
    Edge* p = (Edge*)malloc(sizeof(Edge));
    p->vNum1 = v1;
    p->vNum2 = v2;
    p->isTree = 0;
    p->next = NULL;
    Edge* q = eHead;
    if(q == NULL){
        eHead = p;
    }
    else{
        while(q->next != NULL){
            q = q->next;
        }
        q->next = p;
    }
    
    Vertex* v = findVertex(v1);
    insertIncidentEdge(v, v2, p);
}

void inDegree(){ //有多少指向[v] //ex: 1->3, 2->3 : in[3-1]=2;
    Vertex* p = vHead;
    IncidentEdge* q;
    for(; p!=NULL; p=p->next){
        for(q=p->top; q!=NULL; q=q->next){
            in[q->adjVertex-1]++;
        }
    }
}


void topologicalsort(){ //위상정렬
    Queue q; //建立一個queue
    initQueue(&q); //初始化queue
    Vertex* p;
    IncidentEdge* r;
    inDegree();
    
    for(int i=0; i<6; i++){
        if(in[i] == 0){
            enqueue(&q, i+1);
        }
    }
    while(!isEmpty(&q)){
        int w = dequeue(&q);
        printf("[%d] ",w);
        p = findVertex(w);
        r = p->top;
        while(r!=NULL){
            in[r->adjVertex-1]--;
            if(in[r->adjVertex-1] == 0){
                enqueue(&q, r->adjVertex);
            }
            r = r->next;
        }
    }
}

void printing(){
    Vertex* p = vHead;
    IncidentEdge* q;
    for(; p != NULL; p = p->next){
        printf("정점 %d : ", p->num);
        for(q = p->top; q != NULL; q = q->next){
            printf("[%d] ", q->adjVertex);
        }
        printf("\n");
    }
}

int main(){
    for(int i=0; i<6; i++){
        makeVertices();
    }
    
    insertEdge(1, 2);
    insertEdge(1, 5);
    insertEdge(2, 3);
    insertEdge(4, 5);
    insertEdge(5, 2);
    insertEdge(5, 3);
    insertEdge(5, 6);
    insertEdge(6, 3);

    
    printing();
    
    topologicalsort(); //결과 오류!
    printf("\n");
    
    return 0;
}


